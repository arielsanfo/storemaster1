// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'app/data/modal.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 658872451533216837),
      name: 'Client',
      lastPropertyId: const obx_int.IdUid(3, 5657002605146486917),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 158302388880942993),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8519549158964598049),
            name: 'nom',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5657002605146486917),
            name: 'tel',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 7776625461745074925),
      name: 'Commande',
      lastPropertyId: const obx_int.IdUid(3, 5611379068053034784),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3609975426433619005),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8752411603266576474),
            name: 'dateDeCommande',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5611379068053034784),
            name: 'montantTotal',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 1929273308209531467),
            name: 'produitsEtDate',
            targetId: const obx_int.IdUid(6, 3136216773700831061))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 4252884527236650514),
      name: 'Dette',
      lastPropertyId: const obx_int.IdUid(4, 3144709538535119667),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8069777370176473807),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5008195991906570830),
            name: 'montantTotal',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 925203806956643114),
            name: 'avance',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3144709538535119667),
            name: 'clientId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 6119982190765956896),
            relationTarget: 'Client')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 2977089080308732066),
            name: 'produitsEtQteEtDate',
            targetId: const obx_int.IdUid(7, 4494236094051863945))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 600215792172225283),
      name: 'Iventaire',
      lastPropertyId: const obx_int.IdUid(3, 8199008440879801459),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1359892252700621398),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2593876917845586858),
            name: 'dateDeDecompte',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8199008440879801459),
            name: 'montantTotal',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(3, 2516195554605729117),
            name: 'produitsEtQuantite',
            targetId: const obx_int.IdUid(6, 3136216773700831061))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 6198460336702335464),
      name: 'Produit',
      lastPropertyId: const obx_int.IdUid(9, 3007756304898815976),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2490436348021970827),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7428232425349843900),
            name: 'libele',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7621288212408164629),
            name: 'date_Exp',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7352282497906507797),
            name: 'prix_Vente',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1748998348639261803),
            name: 'specialite',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2863614716990386282),
            name: 'tel',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1827446302974285067),
            name: 'sexe',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3007756304898815976),
            name: 'date_naissance',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 3136216773700831061),
      name: 'ProduitQuantite',
      lastPropertyId: const obx_int.IdUid(3, 3408566158961334966),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3748254664458814657),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8052303341738834179),
            name: 'quantite',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3408566158961334966),
            name: 'produitId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 2341200231070417422),
            relationTarget: 'Produit')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 4494236094051863945),
      name: 'ProduitQuantiteDate',
      lastPropertyId: const obx_int.IdUid(4, 3242007724038846589),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6059084270839534161),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3403245841902463790),
            name: 'quantite',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6651603807701857308),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3242007724038846589),
            name: 'produitId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 4514324744481767169),
            relationTarget: 'Produit')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(7, 4494236094051863945),
      lastIndexId: const obx_int.IdUid(3, 4514324744481767169),
      lastRelationId: const obx_int.IdUid(3, 2516195554605729117),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [7849500681258502750],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Client: obx_int.EntityDefinition<Client>(
        model: _entities[0],
        toOneRelations: (Client object) => [],
        toManyRelations: (Client object) => {},
        getId: (Client object) => object.id,
        setId: (Client object, int id) {
          object.id = id;
        },
        objectToFB: (Client object, fb.Builder fbb) {
          final nomOffset =
              object.nom == null ? null : fbb.writeString(object.nom!);
          final telOffset =
              object.tel == null ? null : fbb.writeString(object.tel!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nomOffset);
          fbb.addOffset(2, telOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final nomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final telParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final object = Client(id: idParam, nom: nomParam, tel: telParam);

          return object;
        }),
    Commande: obx_int.EntityDefinition<Commande>(
        model: _entities[1],
        toOneRelations: (Commande object) => [],
        toManyRelations: (Commande object) => {
              obx_int.RelInfo<Commande>.toMany(1, object.id!):
                  object.produitsEtDate
            },
        getId: (Commande object) => object.id,
        setId: (Commande object, int id) {
          object.id = id;
        },
        objectToFB: (Commande object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.dateDeCommande?.millisecondsSinceEpoch);
          fbb.addInt64(2, object.montantTotal);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateDeCommandeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final dateDeCommandeParam = dateDeCommandeValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(dateDeCommandeValue);
          final montantTotalParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = Commande(
              id: idParam,
              dateDeCommande: dateDeCommandeParam,
              montantTotal: montantTotalParam);
          obx_int.InternalToManyAccess.setRelInfo<Commande>(
              object.produitsEtDate,
              store,
              obx_int.RelInfo<Commande>.toMany(1, object.id!));
          return object;
        }),
    Dette: obx_int.EntityDefinition<Dette>(
        model: _entities[2],
        toOneRelations: (Dette object) => [object.client],
        toManyRelations: (Dette object) => {
              obx_int.RelInfo<Dette>.toMany(2, object.id!):
                  object.produitsEtQteEtDate
            },
        getId: (Dette object) => object.id,
        setId: (Dette object, int id) {
          object.id = id;
        },
        objectToFB: (Dette object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addFloat64(1, object.montantTotal);
          fbb.addFloat64(2, object.avance);
          fbb.addInt64(3, object.client.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final montantTotalParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final avanceParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = Dette(
              id: idParam,
              montantTotal: montantTotalParam,
              avance: avanceParam);
          object.client.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.client.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Dette>(
              object.produitsEtQteEtDate,
              store,
              obx_int.RelInfo<Dette>.toMany(2, object.id!));
          return object;
        }),
    Iventaire: obx_int.EntityDefinition<Iventaire>(
        model: _entities[3],
        toOneRelations: (Iventaire object) => [],
        toManyRelations: (Iventaire object) => {
              obx_int.RelInfo<Iventaire>.toMany(3, object.id!):
                  object.produitsEtQuantite
            },
        getId: (Iventaire object) => object.id,
        setId: (Iventaire object, int id) {
          object.id = id;
        },
        objectToFB: (Iventaire object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.dateDeDecompte?.millisecondsSinceEpoch);
          fbb.addInt64(2, object.montantTotal);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateDeDecompteValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final dateDeDecompteParam = dateDeDecompteValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(dateDeDecompteValue);
          final montantTotalParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = Iventaire(
              id: idParam,
              dateDeDecompte: dateDeDecompteParam,
              montantTotal: montantTotalParam);
          obx_int.InternalToManyAccess.setRelInfo<Iventaire>(
              object.produitsEtQuantite,
              store,
              obx_int.RelInfo<Iventaire>.toMany(3, object.id!));
          return object;
        }),
    Produit: obx_int.EntityDefinition<Produit>(
        model: _entities[4],
        toOneRelations: (Produit object) => [],
        toManyRelations: (Produit object) => {},
        getId: (Produit object) => object.id,
        setId: (Produit object, int id) {
          object.id = id;
        },
        objectToFB: (Produit object, fb.Builder fbb) {
          final libeleOffset =
              object.libele == null ? null : fbb.writeString(object.libele!);
          final specialiteOffset = object.specialite == null
              ? null
              : fbb.writeString(object.specialite!);
          final sexeOffset =
              object.sexe == null ? null : fbb.writeString(object.sexe!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, libeleOffset);
          fbb.addInt64(2, object.date_Exp?.millisecondsSinceEpoch);
          fbb.addFloat64(3, object.prix_Vente);
          fbb.addOffset(5, specialiteOffset);
          fbb.addFloat64(6, object.tel);
          fbb.addOffset(7, sexeOffset);
          fbb.addInt64(8, object.date_naissance?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final date_ExpValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final date_naissanceValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final libeleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final telParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 16);
          final specialiteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final sexeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final date_naissanceParam = date_naissanceValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(date_naissanceValue);
          final date_ExpParam = date_ExpValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(date_ExpValue);
          final prix_VenteParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = Produit(
              id: idParam,
              libele: libeleParam,
              tel: telParam,
              specialite: specialiteParam,
              sexe: sexeParam,
              date_naissance: date_naissanceParam,
              date_Exp: date_ExpParam,
              prix_Vente: prix_VenteParam);

          return object;
        }),
    ProduitQuantite: obx_int.EntityDefinition<ProduitQuantite>(
        model: _entities[5],
        toOneRelations: (ProduitQuantite object) => [object.produit],
        toManyRelations: (ProduitQuantite object) => {},
        getId: (ProduitQuantite object) => object.id,
        setId: (ProduitQuantite object, int id) {
          object.id = id;
        },
        objectToFB: (ProduitQuantite object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.quantite);
          fbb.addInt64(2, object.produit.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final quantiteParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final object = ProduitQuantite(id: idParam, quantite: quantiteParam);
          object.produit.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.produit.attach(store);
          return object;
        }),
    ProduitQuantiteDate: obx_int.EntityDefinition<ProduitQuantiteDate>(
        model: _entities[6],
        toOneRelations: (ProduitQuantiteDate object) => [object.produit],
        toManyRelations: (ProduitQuantiteDate object) => {},
        getId: (ProduitQuantiteDate object) => object.id,
        setId: (ProduitQuantiteDate object, int id) {
          object.id = id;
        },
        objectToFB: (ProduitQuantiteDate object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.quantite);
          fbb.addInt64(2, object.date?.millisecondsSinceEpoch);
          fbb.addInt64(3, object.produit.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final quantiteParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final dateParam = dateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(dateValue);
          final object = ProduitQuantiteDate(
              id: idParam, quantite: quantiteParam, date: dateParam);
          object.produit.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.produit.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Client] entity fields to define ObjectBox queries.
class Client_ {
  /// see [Client.id]
  static final id =
      obx.QueryIntegerProperty<Client>(_entities[0].properties[0]);

  /// see [Client.nom]
  static final nom =
      obx.QueryStringProperty<Client>(_entities[0].properties[1]);

  /// see [Client.tel]
  static final tel =
      obx.QueryStringProperty<Client>(_entities[0].properties[2]);
}

/// [Commande] entity fields to define ObjectBox queries.
class Commande_ {
  /// see [Commande.id]
  static final id =
      obx.QueryIntegerProperty<Commande>(_entities[1].properties[0]);

  /// see [Commande.dateDeCommande]
  static final dateDeCommande =
      obx.QueryDateProperty<Commande>(_entities[1].properties[1]);

  /// see [Commande.montantTotal]
  static final montantTotal =
      obx.QueryIntegerProperty<Commande>(_entities[1].properties[2]);

  /// see [Commande.produitsEtDate]
  static final produitsEtDate =
      obx.QueryRelationToMany<Commande, ProduitQuantite>(
          _entities[1].relations[0]);
}

/// [Dette] entity fields to define ObjectBox queries.
class Dette_ {
  /// see [Dette.id]
  static final id = obx.QueryIntegerProperty<Dette>(_entities[2].properties[0]);

  /// see [Dette.montantTotal]
  static final montantTotal =
      obx.QueryDoubleProperty<Dette>(_entities[2].properties[1]);

  /// see [Dette.avance]
  static final avance =
      obx.QueryDoubleProperty<Dette>(_entities[2].properties[2]);

  /// see [Dette.client]
  static final client =
      obx.QueryRelationToOne<Dette, Client>(_entities[2].properties[3]);

  /// see [Dette.produitsEtQteEtDate]
  static final produitsEtQteEtDate =
      obx.QueryRelationToMany<Dette, ProduitQuantiteDate>(
          _entities[2].relations[0]);
}

/// [Iventaire] entity fields to define ObjectBox queries.
class Iventaire_ {
  /// see [Iventaire.id]
  static final id =
      obx.QueryIntegerProperty<Iventaire>(_entities[3].properties[0]);

  /// see [Iventaire.dateDeDecompte]
  static final dateDeDecompte =
      obx.QueryDateProperty<Iventaire>(_entities[3].properties[1]);

  /// see [Iventaire.montantTotal]
  static final montantTotal =
      obx.QueryIntegerProperty<Iventaire>(_entities[3].properties[2]);

  /// see [Iventaire.produitsEtQuantite]
  static final produitsEtQuantite =
      obx.QueryRelationToMany<Iventaire, ProduitQuantite>(
          _entities[3].relations[0]);
}

/// [Produit] entity fields to define ObjectBox queries.
class Produit_ {
  /// see [Produit.id]
  static final id =
      obx.QueryIntegerProperty<Produit>(_entities[4].properties[0]);

  /// see [Produit.libele]
  static final libele =
      obx.QueryStringProperty<Produit>(_entities[4].properties[1]);

  /// see [Produit.date_Exp]
  static final date_Exp =
      obx.QueryDateProperty<Produit>(_entities[4].properties[2]);

  /// see [Produit.prix_Vente]
  static final prix_Vente =
      obx.QueryDoubleProperty<Produit>(_entities[4].properties[3]);

  /// see [Produit.specialite]
  static final specialite =
      obx.QueryStringProperty<Produit>(_entities[4].properties[4]);

  /// see [Produit.tel]
  static final tel =
      obx.QueryDoubleProperty<Produit>(_entities[4].properties[5]);

  /// see [Produit.sexe]
  static final sexe =
      obx.QueryStringProperty<Produit>(_entities[4].properties[6]);

  /// see [Produit.date_naissance]
  static final date_naissance =
      obx.QueryDateProperty<Produit>(_entities[4].properties[7]);
}

/// [ProduitQuantite] entity fields to define ObjectBox queries.
class ProduitQuantite_ {
  /// see [ProduitQuantite.id]
  static final id =
      obx.QueryIntegerProperty<ProduitQuantite>(_entities[5].properties[0]);

  /// see [ProduitQuantite.quantite]
  static final quantite =
      obx.QueryIntegerProperty<ProduitQuantite>(_entities[5].properties[1]);

  /// see [ProduitQuantite.produit]
  static final produit = obx.QueryRelationToOne<ProduitQuantite, Produit>(
      _entities[5].properties[2]);
}

/// [ProduitQuantiteDate] entity fields to define ObjectBox queries.
class ProduitQuantiteDate_ {
  /// see [ProduitQuantiteDate.id]
  static final id =
      obx.QueryIntegerProperty<ProduitQuantiteDate>(_entities[6].properties[0]);

  /// see [ProduitQuantiteDate.quantite]
  static final quantite =
      obx.QueryIntegerProperty<ProduitQuantiteDate>(_entities[6].properties[1]);

  /// see [ProduitQuantiteDate.date]
  static final date =
      obx.QueryDateProperty<ProduitQuantiteDate>(_entities[6].properties[2]);

  /// see [ProduitQuantiteDate.produit]
  static final produit = obx.QueryRelationToOne<ProduitQuantiteDate, Produit>(
      _entities[6].properties[3]);
}
